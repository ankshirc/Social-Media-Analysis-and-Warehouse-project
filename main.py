import streamlit as st
from db_utils import get_recent_posts, get_user_count, get_post_count, get_group_count
from datetime import datetime
import oracledb

st.set_page_config(page_title="Home | SocialDB", layout="wide")

def inject_custom_css():
    st.markdown("""
        <style>
        body, .stApp {
            background: #0d1117;
            color: #f0f6fc;
        }
        h1, h2, h3 {
            color: #f0f6fc;
        }
        .stTextInput>div>div>input,
        .stDateInput>div>div>input,
        .stPasswordInput>div>div>input {
            background-color: #161b22;
            border: 1px solid #30363d;
            border-radius: 6px;
            padding: 0.5em;
            color: #f0f6fc;
        }
        .stButton>button {
            background-color: #7b2cbf;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.5em 1em;
            font-weight: bold;
        }
        .stButton>button:hover {
            background-color: #9d4edd;
        }
        .stRadio > div {
            background-color: #21262d;
            padding: 0.5em;
            border-radius: 10px;
            color:#f0f6fc;
        }
        .stSidebar {
            background-color: #161b22 !important;
        }
        </style>
    """, unsafe_allow_html=True)

inject_custom_css()

# Database setup and functions
def get_connection():
    return oracledb.connect(
        user="system",
        password="ankshi",
        dsn="localhost/XE"
    )

def create_tables():
    conn = get_connection()
    cursor = conn.cursor()

    # User_Registration
    cursor.execute("""
        BEGIN
            EXECUTE IMMEDIATE '
                CREATE TABLE User_Registration (
                    User_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                    First_name VARCHAR2(100),
                    Last_name VARCHAR2(100),
                    Gender VARCHAR2(20),
                    Date_Of_Birth DATE
                )';
        EXCEPTION WHEN OTHERS THEN
            IF SQLCODE != -955 THEN RAISE; END IF;
        END;
    """)
    
    # User_Login
    cursor.execute("""
        BEGIN
            EXECUTE IMMEDIATE '
                CREATE TABLE User_Login (
                    Login_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                    Email VARCHAR2(100) UNIQUE,
                    Password VARCHAR2(255),
                    Status NUMBER,
                    User_id NUMBER,
                    FOREIGN KEY (User_id) REFERENCES User_Registration(User_id)
                )';
        EXCEPTION WHEN OTHERS THEN
            IF SQLCODE != -955 THEN RAISE; END IF;
        END;
    """)

    conn.commit()
    conn.close()

def add_user(first, last, gender, dob, email, password):
    conn = get_connection()
    cursor = conn.cursor()

    # Generate next available User_id
    cursor.execute("SELECT NVL(MAX(User_id), 0) + 1 FROM User_Registration")
    new_user_id = cursor.fetchone()[0]

    # Generate next available Login_id
    cursor.execute("SELECT NVL(MAX(Login_id), 0) + 1 FROM User_Login")
    new_login_id = cursor.fetchone()[0]

    # Insert into User_Registration
    cursor.execute("""
        INSERT INTO User_Registration (User_id, First_name, Last_name, Gender, Date_Of_Birth)
        VALUES (:user_id, :first, :last, :gender, TO_DATE(:dob, 'YYYY-MM-DD'))
    """, {
        "user_id": new_user_id,
        "first": first,
        "last": last,
        "gender": gender,
        "dob": dob
    })

    # Insert into User_Login
    cursor.execute("""
        INSERT INTO User_Login (Login_id, Email, Password, Status, User_id)
        VALUES (:login_id, :email, :password, 1, :user_id)
    """, {
        "login_id": new_login_id,
        "email": email.lower(),
        "password": password,
        "user_id": new_user_id
    })

    conn.commit()
    conn.close()


def login_user(email, password):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT User_id FROM User_Login
        WHERE Email = :email AND Password = :password
    """, {
        "email": email.lower(),
        "password": password
    })
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def registration_page():
    st.header("üë§ Register")
    with st.form("register_form"):
        first = st.text_input("First Name")
        last = st.text_input("Last Name")
        gender = st.radio("Gender", ["Male", "Female", "Other"])
        dob = st.date_input("Date of Birth")
        email = st.text_input("Email").strip().lower()
        password = st.text_input("Password", type='password')
        confirm = st.text_input("Confirm Password", type='password')
        submit = st.form_submit_button("Register")

        if submit:
            if password != confirm:
                st.error("Passwords do not match!")
            else:
                try:
                    add_user(first, last, gender, dob.strftime("%Y-%m-%d"), email, password)
                    st.success("‚úÖ Account created! Please login.")
                except oracledb.IntegrityError:
                    st.error("‚ö†Ô∏è Email already exists.")

# login page
def login_page():
    st.header("üîê Login")
    email = st.text_input("Email")
    password = st.text_input("Password", type='password')

    if st.button("Login"):
        user_id = login_user(email, password)
        if user_id:
            st.session_state.logged_in = True
            st.session_state.email = email
            st.session_state.user_id = user_id
            st.rerun()  # rerun so main() shows dashboard
        else:
            st.error("‚ùå Invalid email or password.")

def homepage():
    # ---------- Page Setup ----------
    
    inject_custom_css()
    create_tables()

    # ---------- Sidebar ----------
    st.sidebar.title("üìÇ Navigation")
    st.sidebar.success(f"Logged in as: {st.session_state.email}")

    if st.sidebar.button("Logout"):
        st.session_state.logged_in = False
        st.session_state.email = None
        st.session_state.user_id = None 

    #st.sidebar.markdown("---")
    #st.sidebar.page_link("pages/Users.py", label="üë§ Users Page")
    #st.sidebar.page_link("pages/Posts.py", label="üìù Posts Page")
    #st.sidebar.page_link("pages/Groups.py", label="üë™ Groups Page")
    #st.sidebar.page_link("pages/View_Friends.py", label="üë• View Friends")
    #st.sidebar.page_link("pages/Analytics.py", label="üìä Analytics")
    #st.sidebar.page_link("pages/Create_Post.py", label="üìù Create Post")
    #st.sidebar.page_link("pages/Friend_Requests.py", label="ü§ù Friend Requests")
    #st.sidebar.page_link("pages/Create_Group.py", label="üÜï Create Group")

    # ---------- UI ----------
    st.markdown("""
    <style>
        .big-font {
            font-size: 38px !important;
            font-weight: bold;
            color: #008CBA;
        }
        .small-font {
            font-size: 18px !important;
            color: #333333;
        }
        
        .post-box {
            background-color: #ffffff;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 5px solid #008CBA;
            border-radius: 8px;
            color: #000000;
        }

        .post-box blockquote {
            color: #333333;
            font-style: italic;
            margin: 0.5rem 0;
        }

        .post-box small {
            color: #555555;
            font-size: 0.85rem;
        }
    </style>
    """, unsafe_allow_html=True)

    st.markdown("<div class='big-font'>üì± Welcome to SocialDB</div>", unsafe_allow_html=True)
    st.markdown("<div class='small-font'>An Oracle-Connected Social Media Dashboard</div>", unsafe_allow_html=True)


    # Summary metrics
    col1, col2, col3 = st.columns(3)
    col1.metric("üë• Total Users", get_user_count())
    col2.metric("üìù Total Posts", get_post_count())
    col3.metric("üë™ Total Groups", get_group_count())

    st.divider()

    # Recent posts feed
    st.subheader("üì∞ Recent Posts")
    for post_id, content, user in get_recent_posts():
        st.markdown(f"""
            <div class='post-box'>
                <strong>{user}</strong><br>
                <blockquote>{content}</blockquote>
                <small>Post ID: {post_id}</small>
            </div>
        """, unsafe_allow_html=True)

    st.divider()

def main():
    create_tables()

    if "logged_in" not in st.session_state:
        st.session_state.logged_in = False

    if st.session_state.logged_in:
        homepage()
    else:
        st.title("üöÄ Welcome to SocialDB")
        auth_mode = st.radio("Choose an action:", ["Login", "Register"])
        if auth_mode == "Login":
            login_page()
        else:
            registration_page()

if __name__ == "__main__":
    main()            
